import requests
import logging
import os
from time import sleep
from extractors.base_extractor import BaseExtractor

class WeatherExtractor(BaseExtractor):
    NAME = 'OPEN_WEATHER_API'

    def __init__(self, app_name: str, transformer) -> None:
        super().__init__(app_name, transformer)

        # Fetch configurations from the transformer
        self._cities = transformer._storage.config['extract']['request']['cities']
        self._units = transformer._storage.config['extract']['request'].get('units', 'metric')
        self._sleep = int(transformer._storage.config['extract']['request'].get('sleep', 10))
        self._batch_size = int(transformer._storage.config['extract']['request'].get('batch_size', 5))
        self._api_key = os.getenv('OPEN_WEATHER_API_KEY')
        self._url = 'https://api.openweathermap.org/data/2.5/weather'

        # Log the initialized values
        logging.info(f"WeatherExtractor initialized with: {self._cities=}, {self._units=}, {self._sleep=}, {self._batch_size=}")

    def _prepare_request(self, cities: list, units: str, batch_size: int):
        logging.debug("Preparing requests...")
        request_data = []

        for city in cities:
            request_data.append({
                'url': self._url,
                'params': {
                    'q': city,
                    'appid': self._api_key,
                    'units': units
                }
            })

        # Create batches of requests
        request_batches = [request_data[i:i + batch_size] for i in range(0, len(request_data), batch_size)]
        logging.info(f"Prepared {len(request_batches)} request batches.")
        return request_batches

    def _fetch(self):
        logging.info('Fetching weather data...')
        request_batches = self._prepare_request(self._cities, self._units, self._batch_size)

        results = []
        errors = []

        for batch_index, batch in enumerate(request_batches):
            logging.debug(f"Processing batch {batch_index + 1}/{len(request_batches)}...")
            for request in batch:
                logging.debug(f"Sending request for {request['params']['q']}...")
                response = requests.get(request['url'], params=request['params'])

                if response.status_code == 200:
                    logging.info(f'Weather data for {request["params"]["q"]} fetched successfully')
                    results.append(response.json())
                else:
                    logging.error(f'Failed to fetch data for {request["params"]["q"]}. Status code: {response.status_code}')
                    errors.append(request['params']['q'])

            logging.debug(f"Sleeping for {self._sleep} seconds to respect API rate limits...")
            sleep(self._sleep)  # Respect the API rate limits

        logging.info(f"Fetched {len(results)} results and encountered {len(errors)} errors.")
        return results, errors
