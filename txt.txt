auto.py
---------
import sqlite3
import pandas as pd

DB_FILE = "customer_auto.db"
TABLE_NAME = "customers"
CSV_FILE = "../customers-1000.csv"

conn = sqlite3.connect(DB_FILE)
cursor = conn.cursor()

df = pd.read_csv(CSV_FILE)

df.rename(columns={"Index" : "Id"}, inplace=True)

df.columns = df.columns.str.lower().str.replace(" " , "_")

def infer_sqlite_types(series):
    if pd.api.types.is_integer_dtype(series):
        return "INTEGER"
    elif pd.api.types.is_float_dtype(series):
        return "REAL"
    elif pd.api.types.is_bool_dtype(series):
        return "BOOLEAN"
    elif pd.api.types.is_datetime64_any_dtype(series):
        return "DATE"
    else:
        return "TEXT"

columns_with_dtypes = ",\n  ".join([f"{col} {infer_sqlite_types(df[col])}" for col in df.columns])

create_table_query = f"""
    CREATE TABLE IF NOT EXISTS {TABLE_NAME} (
        {columns_with_dtypes}
    );
"""

cursor.execute(create_table_query)
conn.commit()

df.to_sql(TABLE_NAME , conn , if_exists="append" , index=False)

conn.commit()
conn.close()

print("Database and table created successfully! CSV data inserted to the SQLite !")
-------------------------------------------------------------------------------------
data_processor.py
-----------------
import sqlite3
import pandas as pd
import os
from dotenv import load_dotenv
from logger import get_logger
from db_config import get_connection , initialize_db

load_dotenv()

CSV_FILE_PATH= os.getenv("CSV_FILE_PATH" , '../data/customers-1000.csv')
DB_TABLE_NAME= os.getenv("DB_TABLE_NAME" , "customers")
EXPORTED_CSV_FILE = os.getenv("EXPORTED_CSV_FILE" , 'data/customers.csv')

logger = get_logger()

def import_csv_to_db():
    try:
        initialize_db()

        conn = get_connection()

        df = pd.read_csv(CSV_FILE_PATH)

        df.rename(columns={"Index" : "Id"}, inplace=True)

        df.columns = df.columns.str.lower().str.replace(" " , "_")

        df.to_sql(DB_TABLE_NAME , conn , if_exists="append" , index=False)

        conn.commit()
        conn.close()

        logger.info(f"CSV data inserted to the SQLite successfully to {DB_TABLE_NAME}")

    except sqlite3.Error as e:
        logger.error(f"Error inserting data from CSV : {e}")
        raise

    except FileNotFoundError:
        logger.error(f"CSV file not found : {CSV_FILE_PATH}")

def export_db_data_to_csv():
    try:
        initialize_db()

        conn = get_connection()

        df = pd.read_sql_query(f'SELECT * FROM {DB_TABLE_NAME}' , conn)

        df.to_csv(EXPORTED_CSV_FILE , index=False , encoding='utf-8')
        conn.commit()
        conn.close()

        logger.info(f"CSV data exported to the {EXPORTED_CSV_FILE} from SQLite successfully!")

    except sqlite3.Error as e:
        logger.error(f"Error exporting data to CSV : {e}")
        raise
------------------------------------------------------------------------------------------
db_config.py
------------
import sqlite3
import os
from dotenv import load_dotenv
from logger import get_logger
import pandas as pd

load_dotenv()

DB_FILE_NAME = os.getenv("DB_FILE_NAME" , "customer_db.db")
CSV_FILE_PATH= os.getenv("CSV_FILE_PATH" , '../data/customers-1000.csv')
DB_TABLE_NAME= os.getenv("DB_TABLE_NAME" , "customers")

logger = get_logger()

def get_connection():
    try:
        conn = sqlite3.connect(DB_FILE_NAME)
        logger.info("Connected to the SQLite Database successfully !")
        return conn
    except sqlite3.Error as e:
        logger.error(f"Database Connection error: {e}")
        raise
    except FileNotFoundError:
        logger.error(f"DB file not found : {CSV_FILE_PATH}")

def initialize_db():
    try:
        conn = get_connection()
        cursor = conn.cursor()

        df = pd.read_csv(CSV_FILE_PATH)

        df.rename(columns={"Index" : "Id"}, inplace=True)

        df.columns = df.columns.str.lower().str.replace(" " , "_")

        columns_with_dtypes = ",\n  ".join([f"{col} {infer_sqlite_types(df[col])}" for col in df.columns])

        create_table_query = f"""
            CREATE TABLE IF NOT EXISTS {DB_TABLE_NAME} (
                {columns_with_dtypes}
            );
        """

        cursor.execute(create_table_query)
        logger.info(f"SQLite Database table : {DB_TABLE_NAME} created successfully !")
        conn.commit()

    except sqlite3.Error as e:
        logger.error(f"Database initializing error: {e}")
        raise
    except FileNotFoundError:
        logger.error(f"CSV file not found : {CSV_FILE_PATH}")

def infer_sqlite_types(series):
    if pd.api.types.is_integer_dtype(series):
        return "INTEGER"
    elif pd.api.types.is_float_dtype(series):
        return "REAL"
    elif pd.api.types.is_bool_dtype(series):
        return "BOOLEAN"
    elif pd.api.types.is_datetime64_any_dtype(series):
        return "DATE"
    else:
        return "TEXT"
-----------------------------------------------------------
logger.py
-----------
import logging
import os
from dotenv import load_dotenv

load_dotenv()

LOG_FILE = os.getenv("LOG_FILE_PATH" , "logs/app.log")

os.makedirs(os.path.dirname(LOG_FILE), exist_ok=True)

logging.basicConfig(filename=LOG_FILE, 
                        level=logging.INFO,
                        format= "%(asctime)s - %(levelname)s - %(message)s",
                        datefmt="%Y-%m-%d %H:%M:%S"
                        )

def get_logger():
    return logging.getLogger()
-----------------------------------------------------------------------------
main.py
----------
from logger import get_logger
from data_processor import import_csv_to_db , export_db_data_to_csv

logger = get_logger()

def main():

    # import_csv_to_db()
    export_db_data_to_csv()
    logger.info("Operation successful!")

if __name__ == "__main__":
    main()
